So, you've written an amazing Python program, it does everything you want and then some. You stop and stare at it in amazement, and realize that it's just so great, that it would be selfish not to share it with the entire world.

However, there's one small problem. Your program uses various libraries, which your users will need to install, and you want to make that process as painless as possible, or, if it's a web app, you want to put it up on a server for everyone to enjoy, but you need to figure out what libraries it uses and install those on the server as well, which is a hassle. What's a good way to ease this pain?

Suppose that your first program has made you a millionaire, and now you're running low on cash, so you decide to spend a few hours writing another one. However, your system still has all the old versions of the libraries you used to build the first program, and when you try to upgrade them, it breaks because it hasn't been maintained in ages. How do you solve that problem?

Luckily, there's an easy way to solve both problems. We can use virtualenv to create separate, self-contained virtual environments where each environment is contained in a its own directory. Each environment can be activated when you want to work on the program that uses it.

The best way to show how virtualenv works is by example, so let's go through the process of installing and using it. Assuming you have the average Python installation (probably 2.7, on any of the three main OSes), the following steps should work as they are. Windows might do some things slightly differently, but mostly it should all work the same. In the examples, the lines starting with an "$" is what you will need to type in ($ is my prompt), so ignore the $ and type in the rest of the command.

To install virtualenv (and pip, while we're at it), you can use setuptools:

$ easy_install pip virtualenv
After that, both packages will be installed globally in your system, so you might want to use sudo if you are on Linux or OS X. We can now continue to creating an environment. I prefer to put the environment in the directory that contains the project I'm working on, so switch to the directory that contains your scripts and run (you shouldn't need to use sudo):

$ virtualenv env
That will create a directory called env in your current directory and put the environment there. If you look inside, you should see some subdirectories, containing various files. The bin directory, in particular, should contain executables called python, pip, easy_install, etc. These executables differ from their globally-installed namesakes in that the former will be run in the virtual environment you've just created, while the latter will run system-wide.

To illustrate this point, we need to install some packages. To do this, we will use pip, because it's great. We already installed it earlier, so we can use it simply by doing:

$ env/bin/pip install ipython shortuuid
ipython is a very nice Python shell, which you might already be familiar with, and shortuuid is a small library for creating short unique IDs, which we'll use to demonstrate how virtualenv works.

You might have noticed that we didn't just run pip, we ran env/bin/pip, which means that the two packages are now installed inside the virtualenv. Sure enough, if you run:A

spinning
